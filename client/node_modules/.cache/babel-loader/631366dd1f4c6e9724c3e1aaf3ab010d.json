{"ast":null,"code":"var _jsxFileName = \"/Users/alvaro/Desktop/SlashDebt/client/src/components/pages/debtList/DebtList.jsx\";\nimport React, { Component } from \"react\";\nimport DebtServices from \"../../../services/debt.services\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { Line } from \"react-chartjs-2\";\nimport DebtCard from \"./DebtCard.jsx\";\nconst totalDebt = 0;\n\nclass DebtList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      debts: [],\n      loggedInUser: null,\n      doughnutDebts: [],\n      doughnutDebtsLabels: [],\n      lineDebts: [],\n      lineDebtsLabels: []\n    };\n    this.service = new DebtServices();\n  }\n\n  _sumOfDebts(debtsCollection) {\n    let finalDates = {};\n    debtsCollection.forEach((debt, idx) => {\n      debt.history.forEach((year, idx) => {\n        let monthsCollection = year.amount;\n\n        for (month in monthsCollection) {\n          let finalMonth = month + year.year;\n          let finalAmount = finalDates[finalMonth];\n          let euros = monthsCollection[month];\n          finalAmount ? finalDates[finalMonth] = +finalDates[finalMonth] + euros : finalDates[finalMonth] = \"0\";\n        }\n      });\n    });\n    return finalDates;\n  }\n\n  componentDidMount() {\n    this.service.getAllDebts(this.props.loggedInUser._id).then(debts => {\n      let historicDebts = this._sumOfDebts(debts);\n\n      let doughnutDebts = [];\n      let doughnutDebtsLabels = [];\n      let lineDebts = Object.values(historicDebts);\n      let lineDebtsLabels = Object.keys(historicDebts);\n      debts.forEach(debt => {\n        doughnutDebts.push(debt.remaining);\n        doughnutDebtsLabels.push(debt.name);\n      });\n    });\n    this.setState({ ...this.state,\n      debts,\n      doughnutDebts,\n      doughnutDebtsLabels,\n      lineDebts: lineDebts,\n      lineDebtsLabels: lineDebts\n    });\n  }\n\n  render() {\n    console.log(this.state.doughnutDebts);\n    const dataLine = {\n      labels: this.state.lineDebtsLabels,\n      datasets: [{\n        label: \"My First dataset\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: this.state.lineDebts\n      }]\n    };\n    const dataChartDoughnut = {\n      labels: this.state.doughnutDebtsLabels,\n      datasets: [{\n        data: this.state.doughnutDebts,\n        backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#009018\", \"#00c5ff\"],\n        hoverBackgroundColor: [\"#d4395a\", \"#3791ce\", \"#dbaa31\", \"#18872a\", \"#0ca5d2\"]\n      }]\n    };\n    return React.createElement(\"div\", {\n      className: \"dashboard-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Hola estas son todas tus deudas\"), \";\", React.createElement(Doughnut, {\n      data: dataChartDoughnut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(Line, {\n      data: dataLine,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"debt-cards-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.state.debts.map(debt => React.createElement(DebtCard, Object.assign({\n      key: debt._id\n    }, debt, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default DebtList;","map":{"version":3,"sources":["/Users/alvaro/Desktop/SlashDebt/client/src/components/pages/debtList/DebtList.jsx"],"names":["React","Component","DebtServices","Doughnut","Line","DebtCard","totalDebt","DebtList","constructor","state","debts","loggedInUser","doughnutDebts","doughnutDebtsLabels","lineDebts","lineDebtsLabels","service","_sumOfDebts","debtsCollection","finalDates","forEach","debt","idx","history","year","monthsCollection","amount","month","finalMonth","finalAmount","euros","componentDidMount","getAllDebts","props","_id","then","historicDebts","Object","values","keys","push","remaining","name","setState","render","console","log","dataLine","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","dataChartDoughnut","hoverBackgroundColor","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport DebtServices from \"../../../services/debt.services\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { Line } from \"react-chartjs-2\";\nimport DebtCard from \"./DebtCard.jsx\";\n\nconst totalDebt = 0;\n\nclass DebtList extends Component {\n  state = {\n    debts: [],\n    loggedInUser: null,\n    doughnutDebts: [],\n    doughnutDebtsLabels: [],\n    lineDebts: [],\n    lineDebtsLabels: []\n  };\n\n  constructor() {\n    super();\n    this.service = new DebtServices();\n  }\n\n  _sumOfDebts(debtsCollection){\n            let finalDates = {}\n            debtsCollection.forEach((debt, idx) => {\n                debt.history.forEach((year, idx) => {\n                    let monthsCollection = year.amount\n                    for (month in monthsCollection) {\n                        let finalMonth = month + year.year\n                        let finalAmount = finalDates[finalMonth]\n                        let euros = monthsCollection[month]\n                        finalAmount ?\n                            finalDates[finalMonth] = +finalDates[finalMonth] + euros :\n                            finalDates[finalMonth] = \"0\"\n                    }\n                })\n            })\n\n            return finalDates\n  }\n\n  componentDidMount() {\n    this.service.getAllDebts(this.props.loggedInUser._id)\n    .then(debts => {\n      let historicDebts = this._sumOfDebts(debts)\n      let doughnutDebts = [];\n      let doughnutDebtsLabels = [];\n      let lineDebts = Object.values(historicDebts);\n      let lineDebtsLabels = Object.keys(historicDebts);\n      \n      debts.forEach(debt => {\n        doughnutDebts.push(debt.remaining);\n        doughnutDebtsLabels.push(debt.name);\n        });\n      });\n\n      this.setState({\n        ...this.state,\n        debts,\n        doughnutDebts,\n        doughnutDebtsLabels,\n        lineDebts: lineDebts,\n        lineDebtsLabels: lineDebts\n      });\n    \n  }\n\n  render() {\n    console.log(this.state.doughnutDebts);\n\n    const dataLine = {\n      labels: this.state.lineDebtsLabels,\n      datasets: [\n        {\n          label: \"My First dataset\",\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(75,192,192,0.4)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.state.lineDebts\n        }\n      ]\n    };\n\n    const dataChartDoughnut = {\n      labels: this.state.doughnutDebtsLabels,\n      datasets: [\n        {\n          data: this.state.doughnutDebts,\n          backgroundColor: [\n            \"#FF6384\",\n            \"#36A2EB\",\n            \"#FFCE56\",\n            \"#009018\",\n            \"#00c5ff\"\n          ],\n          hoverBackgroundColor: [\n            \"#d4395a\",\n            \"#3791ce\",\n            \"#dbaa31\",\n            \"#18872a\",\n            \"#0ca5d2\"\n          ]\n        }\n      ]\n    };\n    return (\n      <div className=\"dashboard-container\">\n        <div>Hola estas son todas tus deudas</div>;\n        <Doughnut data={dataChartDoughnut}></Doughnut>\n        <Line data={dataLine}></Line>\n        <div id=\"debt-cards-container\">\n          {this.state.debts.map(debt => (\n            <DebtCard key={debt._id} {...debt} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DebtList;\n"]},"metadata":{},"sourceType":"module"}